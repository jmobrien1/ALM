name: Deploy to GoDaddy (FTPS, stable)

on:
  push:
    branches: ["main"]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    env:
      SITE_HOST: https://www.allegiancelistmarketing.com
      RUN_INGEST: 'false'   # flip to 'true' when ingest script is ready

    steps:
      - uses: actions/checkout@v4

      # Tools first so lftp exists before we call it
      - name: Install lftp + curl + jq
        run: |
          set -euxo pipefail
          sudo apt-get update
          sudo apt-get install -y lftp curl jq

      - name: Setup Node (for schema validation and optional ingest)
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Validate the JSON contract (fast fail on real data errors)
      - name: Validate datacards.json (schema + invariants)
        run: |
          set -euxo pipefail
          test -f assets/data/datacards.json

          # Schema (draft-07, permissive on union types)
          npx -y ajv-cli@5 validate \
            -s assets/data/datacards.schema.json \
            -d assets/data/datacards.json \
            --strict=false

          # Invariants we actually care about
          jq -e 'type=="array"' assets/data/datacards.json >/dev/null
          jq -e '.[] | select((.card_id|tostring=="580140") or (.card_id|tostring=="424915"))' assets/data/datacards.json >/dev/null
          jq -e '[ .[] | select(.markdown and (.markdown|type=="string")) ] | length >= 5' assets/data/datacards.json >/dev/null

      # Optional ingest (kept non-blocking until your script is solid)
      - name: (optional) Build datacards from PDFs
        if: ${{ env.RUN_INGEST == 'true' }}
        continue-on-error: true
        run: |
          set -euxo pipefail
          if [ -f tools/ingest_legacy_pdfs.js ]; then
            node --trace-uncaught --unhandled-rejections=strict tools/ingest_legacy_pdfs.js
          else
            echo "Skipping ingest (file missing)"
          fi

      # Package site â†’ out/
      - name: Prepare artifact
        run: |
          set -euxo pipefail
          rm -rf out
          mkdir -p out/.well-known
          rsync -av --delete \
            --exclude ".git" \
            --exclude ".github" \
            --exclude "out" \
            --exclude "*.bak.*" \
            --exclude ".DS_Store" \
            ./ ./out/

          # deploy markers
          echo "${GITHUB_SHA}" > out/deploy-check.txt
          echo "${GITHUB_SHA}" > out/.well-known/alm-deploy.txt

          # legacy JSON path for older pages
          if [ -f out/assets/data/datacards.json ]; then
            mkdir -p out/data
            cp -f out/assets/data/datacards.json out/data/datacards.json
          fi

          # /marketplace/ alias
          mkdir -p out/marketplace
          cp -f out/marketplace.html out/marketplace/index.html || true

      - name: Confirm lftp install
        run: lftp --version

      # Upload (NO shell commands inside lftp; everything else runs in bash outside)
      - name: Upload via FTPS (verbose + tolerant mkdir)
        env:
          FTP_SERVER:   ${{ secrets.FTP_SERVER }}
          FTP_USERNAME: ${{ secrets.FTP_USERNAME }}
          FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
          FTP_DIR:      ${{ secrets.FTP_DIR }}
        run: |
          set -euxo pipefail
          : "${FTP_DIR:=public_html}"
          lftp -u "$FTP_USERNAME","$FTP_PASSWORD" "$FTP_SERVER" -e "\
            set cmd:fail-exit true; \
            set net:max-retries 10; set net:persist-retries 3; set net:timeout 60; \
            set net:reconnect-interval-base 5; set net:reconnect-interval-max 60; \
            set ftp:passive-mode true; set ftp:ssl-force true; set ftp:ssl-protect-data true; \
            set xfer:clobber on; set ssl:verify-certificate false; \
            mkdir -f -p $FTP_DIR; cd $FTP_DIR; \
            mirror -R --ignore-time --delete --verbose=3 out/ ./; \
            cls -la; pwd; \
            bye"

      # Give the CDN / edge a moment if needed (Sucuri/GoDaddy can lag)
      - name: Wait for deploy propagation
        run: sleep 15

      # Prove docroot == this commit (with retries + no-cache)
      - name: Verify deploy (deploy-check.txt)
        run: |
          set -euxo pipefail
          for i in 1 2 3 4 5 6 7 8; do
            live_sha=$(curl -fsS -H 'Cache-Control: no-cache' -H 'Pragma: no-cache' \
              "$SITE_HOST/deploy-check.txt?v=$(date +%s)")
            if [ "$live_sha" = "${GITHUB_SHA}" ]; then
              echo "Docroot updated: $live_sha"
              exit 0
            fi
            echo "Mismatch (got $live_sha, want ${GITHUB_SHA}); retry #$i..."
            sleep $((i*5))
          done
          echo "Docroot not updated after retries."
          exit 1

      # Verify JSON + pages; heal JSON if needed (do this OUTSIDE lftp)
      - name: Verify JSON + pages (heal if needed)
        env:
          FTP_SERVER:   ${{ secrets.FTP_SERVER }}
          FTP_USERNAME: ${{ secrets.FTP_USERNAME }}
          FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
          FTP_DIR:      ${{ secrets.FTP_DIR }}
        run: |
          set -euxo pipefail
          : "${FTP_DIR:=public_html}"
          ad="$SITE_HOST/assets/data/datacards.json?v=$(date +%s)"
          body=$(curl -fsS -H 'Cache-Control: no-cache' -H 'Pragma: no-cache' "$ad" || true)

          ok=0
          echo "$body" | jq -e 'type=="array"' >/dev/null 2>&1 && ok=1 || ok=0
          echo "$body" | jq -e '.[] | select((.card_id|tostring=="580140") or (.card_id|tostring=="424915"))' >/dev/null 2>&1 || ok=0

          if [ "$ok" -ne 1 ]; then
            echo "Healing datacards.json on server (both canonical + legacy paths)..."
            curl --ssl-reqd --insecure --ftp-create-dirs --ftp-pasv --disable-epsv \
              --user "$FTP_USERNAME:$FTP_PASSWORD" \
              -T out/assets/data/datacards.json \
              "ftp://$FTP_SERVER/$FTP_DIR/assets/data/datacards.json"

            curl --ssl-reqd --insecure --ftp-create-dirs --ftp-pasv --disable-epsv \
              --user "$FTP_USERNAME:$FTP_PASSWORD" \
              -T out/assets/data/datacards.json \
              "ftp://$FTP_SERVER/$FTP_DIR/data/datacards.json"

            sleep 3
            body=$(curl -fsS -H 'Cache-Control: no-cache' -H 'Pragma: no-cache' "$ad")
            echo "$body" | jq -e '.[] | select((.card_id|tostring=="580140") or (.card_id|tostring=="424915"))' >/dev/null
          fi

          # Pages smoke test (should NOT show the not-found banner)
          curl -fsS "$SITE_HOST/datacard.html?id=580140&v=$(date +%s)" | grep -q "Data card not found" && { echo "580140 page not rendering"; exit 1; } || true
          curl -fsS "$SITE_HOST/datacard.html?id=424915&v=$(date +%s)" | grep -q "Data card not found" && { echo "424915 page not rendering"; exit 1; } || true
