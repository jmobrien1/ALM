name: Deploy to GoDaddy (FTPS, stable)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    env:
      RUN_INGEST: 'false'   # flip to 'true' later when ingest is ready

    steps:
      - uses: actions/checkout@v4

      # Tools first (so lftp exists before use)
      - name: Install lftp + curl + jq
        run: |
          set -euxo pipefail
          sudo apt-get update
          sudo apt-get install -y lftp curl jq

      - name: Setup Node (for schema validation)
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Validate the JSON contract (schema + invariants)
      - name: Validate datacards.json (schema + contracts)
        run: |
          set -euxo pipefail
          test -f assets/data/datacards.json

          # JSON Schema
          npx -y ajv-cli@5 validate \
            -s assets/data/datacards.schema.json \
            -d assets/data/datacards.json

          # Contract: array + contains legacy IDs + >=5 markdown-backed cards
          jq -e 'type=="array"' assets/data/datacards.json >/dev/null
          jq -e '.[] | select((.card_id|tostring=="580140") or (.card_id|tostring=="424915"))' assets/data/datacards.json >/dev/null
          jq -e '[ .[] | select(.markdown and (.markdown|type=="string")) ] | length >= 5' assets/data/datacards.json >/dev/null

      # Optional ingest – gated, non-blocking
      - name: (optional) Build datacards from PDFs
        run: |
          set -euxo pipefail
          if [ -f tools/ingest_legacy_pdfs.js ] && [ "${RUN_INGEST}" = "true" ]; then
            node tools/ingest_legacy_pdfs.js
          else
            echo "Skipping ingest (flag false or file missing)"
          fi

      # Package site → out/
      - name: Prepare artifact
        run: |
          set -euxo pipefail
          rm -rf out
          mkdir -p out/.well-known
          rsync -av --delete \
            --exclude ".git" \
            --exclude ".github" \
            --exclude "out" \
            --exclude "*.bak.*" \
            --exclude ".DS_Store" \
            ./ ./out/

          # deploy markers
          echo "${GITHUB_SHA}" > out/deploy-check.txt
          mkdir -p out/.well-known
          echo "${GITHUB_SHA}" > out/.well-known/alm-deploy.txt

          # legacy JSON path for older pages
          if [ -f out/assets/data/datacards.json ]; then
            mkdir -p out/data
            cp -f out/assets/data/datacards.json out/data/datacards.json
          fi

          # /marketplace/ alias
          mkdir -p out/marketplace
          cp -f out/marketplace.html out/marketplace/index.html || true

      - name: Confirm lftp install
        run: lftp --version

      # Upload (tolerant mkdir, verbose mirror)
      - name: Upload via FTPS (verbose + tolerant mkdir)
        env:
          FTP_SERVER:   ${{ secrets.FTP_SERVER }}
          FTP_USERNAME: ${{ secrets.FTP_USERNAME }}
          FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
          FTP_DIR:      ${{ secrets.FTP_DIR }}
        run: |
          set -euxo pipefail
          : "${FTP_DIR:=public_html}"
          lftp -u "$FTP_USERNAME","$FTP_PASSWORD" "$FTP_SERVER" -e "\
            set net:max-retries 5; set net:persist-retries 3; set net:timeout 45; \
            set net:reconnect-interval-base 5; set net:reconnect-interval-max 60; \
            set ftp:passive-mode true; set ftp:ssl-force true; set ftp:ssl-protect-data true; \
            set xfer:clobber on; set ssl:verify-certificate false; \
            mkdir -f -p $FTP_DIR; cd $FTP_DIR; \
            mirror -R --ignore-time --delete --verbose=3 out/ ./; \
            bye"

      # Prove docroot == this commit
      - name: Verify deploy (deploy-check.txt)
        run: |
          set -euxo pipefail
          live_sha=$(curl -fsS "https://www.allegiancelistmarketing.com/deploy-check.txt?v=$(date +%s)")
          test "$live_sha" = "${GITHUB_SHA}"
          echo "Docroot updated: $live_sha"

      # Verify JSON + pages; heal JSON if needed
      - name: Verify JSON + pages (heal if needed)
        env:
          FTP_SERVER:   ${{ secrets.FTP_SERVER }}
          FTP_USERNAME: ${{ secrets.FTP_USERNAME }}
          FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
          FTP_DIR:      ${{ secrets.FTP_DIR }}
        run: |
          set -euxo pipefail
          : "${FTP_DIR:=public_html}"
          ad="https://www.allegiancelistmarketing.com/assets/data/datacards.json?v=$(date +%s)"
          body=$(curl -fsS "$ad" || true)

          ok=0
          echo "$body" | jq -e 'type=="array"' >/dev/null 2>&1 && ok=1 || ok=0
          echo "$body" | jq -e '.[] | select((.card_id|tostring=="580140") or (.card_id|tostring=="424915"))' >/dev/null 2>&1 || ok=0

          if [ "$ok" -ne 1 ]; then
            echo "Healing datacards.json on server..."
            curl --ssl-reqd --insecure --ftp-create-dirs --ftp-pasv --disable-epsv \
              --user "$FTP_USERNAME:$FTP_PASSWORD" \
              -T out/assets/data/datacards.json \
              "ftp://$FTP_SERVER/$FTP_DIR/assets/data/datacards.json"
            curl --ssl-reqd --insecure --ftp-create-dirs --ftp-pasv --disable-epsv \
              --user "$FTP_USERNAME:$FTP_PASSWORD" \
              -T out/assets/data/datacards.json \
              "ftp://$FTP_SERVER/$FTP_DIR/data/datacards.json"
            body=$(curl -fsS "$ad")
            echo "$body" | jq -e '.[] | select((.card_id|tostring=="580140") or (.card_id|tostring=="424915"))' >/dev/null
          fi

          # Pages smoke test (should not contain "Data card not found")
          curl -fsS "https://www.allegiancelistmarketing.com/datacard.html?id=580140&v=$(date +%s)" | grep -q "Data card not found" && { echo "580140 page not rendering"; exit 1; } || true
          curl -fsS "https://www.allegiancelistmarketing.com/datacard.html?id=424915&v=$(date +%s)" | grep -q "Data card not found" && { echo "424915 page not rendering"; exit 1; } || true
