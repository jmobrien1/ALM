name: Deploy to GoDaddy (FTPS)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    env:
      SITE_HOST: www.allegiancelistmarketing.com

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Tools
        run: sudo apt-get update && sudo apt-get install -y lftp curl jq

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Validate Data Contracts
        run: |
          set -euxo pipefail
          npx -y ajv-cli@5 validate -s assets/data/datacards.schema.json -d assets/data/datacards.json
          jq -e 'type=="array"' assets/data/datacards.json >/dev/null

      - name: Prepare Artifact
        run: |
          set -euxo pipefail
          rm -rf out
          rsync -av --delete \
            --exclude ".git" --exclude ".github" --exclude "out" \
            --exclude "*.bak.*" --exclude ".DS_Store" \
            ./ out/
          mkdir -p out/.well-known
          echo "${GITHUB_SHA}" > out/deploy-check.txt
          echo "${GITHUB_SHA}" > out/.well-known/alm-deploy.txt

      - name: Upload via FTPS
        env:
          FTP_SERVER: ${{ secrets.FTP_SERVER }}
          FTP_USERNAME: ${{ secrets.FTP_USERNAME }}
          FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
          FTP_DIR: ${{ secrets.FTP_DIR }}
        run: |
          set -euxo pipefail
          # Default to "." if FTP_DIR is not set, which we confirmed is correct.
          : "${FTP_DIR:=.}"
          lftp -u "$FTP_USERNAME","$FTP_PASSWORD" "$FTP_SERVER" -e "
            set ftp:passive-mode true
            set ftp:ssl-force true
            set ftp:ssl-protect-data true
            set ssl:verify-certificate false
            set xfer:clobber on
            set net:max-retries 3
            set net:timeout 30
            cd '$FTP_DIR'
            mirror -R --ignore-time --delete --verbose=3 out/ ./
            bye
          "

      - name: Wait for Server Cache Propagation
        run: sleep 30

      - name: Verify Live Deployment via HTTP
        run: |
          set -euxo pipefail
          for i in {1..8}; do
            live_sha=$(curl -fsS -H 'Cache-Control: no-cache' -H 'Pragma: no-cache' "https://${SITE_HOST}/deploy-check.txt?v=$(date +%s)")
            if [ "$live_sha" = "${GITHUB_SHA}" ]; then
              echo "✅ SUCCESS: Live site is updated to commit ${GITHUB_SHA}"
              exit 0
            fi
            echo "Attempt $i: Mismatch found (Live: $live_sha, Expected: ${GITHUB_SHA}). Retrying in $((i*5))s..."
            sleep $((i*5))
          done
          echo "❌ FAILURE: Live site did not update after multiple retries."
          exit 1
