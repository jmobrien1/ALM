name: Deploy to GoDaddy (FTPS, stable)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    env:
      SITE_HOST: www.allegiancelistmarketing.com

    steps:
      - uses: actions/checkout@v4

      # Tools first (so lftp exists before any use)
      - name: Install lftp + curl + jq
        run: |
          set -euxo pipefail
          sudo apt-get update
          sudo apt-get install -y lftp curl jq

      - name: Setup Node (for schema validation)
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Optional: validate JSON contract (kept – fail fast if broken)
      - name: Validate datacards.json (schema + contracts)
        run: |
          set -euxo pipefail
          test -f assets/data/datacards.json
          npx -y ajv-cli@5 validate \
            -s assets/data/datacards.schema.json \
            -d assets/data/datacards.json
          jq -e 'type=="array"' assets/data/datacards.json >/dev/null
          jq -e '.[] | select((.card_id|tostring=="580140") or (.card_id|tostring=="424915"))' assets/data/datacards.json >/dev/null
          jq -e '[ .[] | select(.markdown and (.markdown|type=="string")) ] | length >= 5' assets/data/datacards.json >/dev/null

      # Package site → out/
      - name: Prepare artifact
        run: |
          set -euxo pipefail
          rm -rf out
          rsync -av --delete \
            --exclude ".git" \
            --exclude ".github" \
            --exclude "out" \
            --exclude "*.bak.*" \
            --exclude ".DS_Store" \
            ./ ./out/
          mkdir -p out/.well-known
          echo "${GITHUB_SHA}" > out/deploy-check.txt
          echo "${GITHUB_SHA}" > out/.well-known/alm-deploy.txt
          if [ -f out/assets/data/datacards.json ]; then
            mkdir -p out/data
            cp -f out/assets/data/datacards.json out/data/datacards.json
          fi
          mkdir -p out/marketplace
          cp -f out/marketplace.html out/marketplace/index.html || true
          ls -la out/ out/.well-known || true

      - name: Confirm lftp install
        run: lftp --version

      # Upload (pure lftp commands; no shell pipes inside)
      - name: Upload via FTPS (verbose + tolerant mkdir)
        env:
          FTP_SERVER:   ${{ secrets.FTP_SERVER }}
          FTP_USERNAME: ${{ secrets.FTP_USERNAME }}
          FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
          FTP_DIR:      ${{ secrets.FTP_DIR }}
        run: |
          set -euxo pipefail
          : "${FTP_DIR:=.}"
          lftp -u "$FTP_USERNAME","$FTP_PASSWORD" "$FTP_SERVER" -e "\
            set net:max-retries 5; set net:persist-retries 3; set net:timeout 45; \
            set net:reconnect-interval-base 5; set net:reconnect-interval-max 60; \
            set ftp:passive-mode true; set ftp:ssl-force true; set ftp:ssl-protect-data true; \
            set xfer:clobber on; set ssl:verify-certificate false; \
            mkdir -p $FTP_DIR; cd $FTP_DIR; \
            mirror -R --ignore-time --delete --verbose=3 out/ ./; \
            pwd; ls -la; bye"

      - name: Wait for deploy propagation
        run: sleep 45

      - name: Verify deploy (deploy-check.txt)
        env:
          SITE_HOST: ${{ env.SITE_HOST }}
        run: |
          set -euxo pipefail
          for i in 1 2 3 4 5 6 7 8; do
            live_sha=$(curl -fsS -H 'Cache-Control: no-cache' -H 'Pragma: no-cache' "https://${SITE_HOST}/deploy-check.txt?v=$(date +%s)")
            if [ "$live_sha" = "${GITHUB_SHA}" ]; then
              echo "Docroot updated: $live_sha"; exit 0
            fi
            echo "Mismatch (got $live_sha, want ${GITHUB_SHA}); retry #$i..."
            sleep $((i*5))
          done
          echo "Docroot not updated after retries."; exit 1
