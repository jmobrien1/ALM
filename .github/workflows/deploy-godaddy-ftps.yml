name: Deploy to GoDaddy (FTPS, robust)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    steps:
      - uses: actions/checkout@v4

      # --- Build (Node) ---
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install deps (if package.json exists)
        run: |
          set -e
          if [ -f package.json ]; then
            if [ -f package-lock.json ]; then
              npm ci --no-audit --no-fund
            else
              npm i --no-audit --no-fund
            fi
          else
            echo "No package.json; skipping npm install"
          fi

      - name: Build datacards from PDFs (optional)
        run: |
          set -e
          if [ -f tools/ingest_legacy_pdfs.js ]; then
            node tools/ingest_legacy_pdfs.js
          else
            echo "No ingest_legacy_pdfs.js; skipping ingest"
          fi

      # --- Prepare artifact ---
      - name: Prepare artifact
        run: |
          set -e
          rm -rf out
          mkdir -p out/.well-known
          rsync -av --delete \
            --exclude ".git" \
            --exclude ".github" \
            --exclude "out" \
            --exclude "*.bak.*" \
            --exclude ".DS_Store" \
            ./ ./out/
          # write deploy markers
          echo "${GITHUB_SHA}" > out/.well-known/alm-deploy.txt
          echo "${GITHUB_SHA}" > out/deploy-check.txt
          # keep legacy JSON path too
          if [ -f out/assets/data/datacards.json ]; then
            mkdir -p out/data
            cp -f out/assets/data/datacards.json out/data/datacards.json
          fi
          # ensure /marketplace/ alias
          mkdir -p out/marketplace
          cp -f out/marketplace.html out/marketplace/index.html || true

      # --- Upload ---
      - name: Install lftp + curl + jq
        run: sudo apt-get update && sudo apt-get install -y lftp curl jq

      - name: Upload via FTPS
        env:
          FTP_SERVER:   ${{ secrets.FTP_SERVER }}
          FTP_USERNAME: ${{ secrets.FTP_USERNAME }}
          FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
          FTP_DIR:      ${{ secrets.FTP_DIR }}
        run: |
          set -e
          : "${FTP_DIR:=public_html}"
          lftp -u "$FTP_USERNAME","$FTP_PASSWORD" "$FTP_SERVER" -e "\
            set net:max-retries 5; set net:persist-retries 3; set net:timeout 45; \
            set net:reconnect-interval-base 5; set net:reconnect-interval-max 60; \
            set ftp:passive-mode true; set ftp:ssl-force true; set ftp:ssl-protect-data true; \
            set xfer:clobber on; set ssl:verify-certificate false; \
            mkdir -p $FTP_DIR; cd $FTP_DIR; \
            mirror -R --ignore-time --delete --verbose=2 out/ ./; \
            bye"

      # --- Verify + self-heal ---
      - name: Verify docroot SHA (deploy-check.txt)
        run: |
          set -e
          url="https://www.allegiancelistmarketing.com/deploy-check.txt?v=$(date +%s)"
          live_sha=$(curl -fsS "$url" || true)
          if [ "$live_sha" != "${GITHUB_SHA}" ]; then
            echo "Docroot not updated (got '$live_sha')"
            exit 1
          fi
          echo "Docroot updated: $live_sha"

      - name: Verify LIVE JSON (has legacy IDs) and self-heal if needed
        env:
          FTP_SERVER:   ${{ secrets.FTP_SERVER }}
          FTP_USERNAME: ${{ secrets.FTP_USERNAME }}
          FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
          FTP_DIR:      ${{ secrets.FTP_DIR }}
        run: |
          set -e
          : "${FTP_DIR:=public_html}"
          canonical="https://www.allegiancelistmarketing.com/assets/data/datacards.json?v=$(date +%s)"
          body=$(curl -fsS "$canonical" || true)

          good=0
          echo "$body" | jq -e 'type=="array"' >/dev/null 2>&1 && good=1
          echo "$body" | jq -e '.[] | select((.card_id|tostring=="580140") or (.card_id|tostring=="424915"))' >/dev/null 2>&1 || good=0

          if [ "$good" -ne 1 ]; then
            echo "Self-heal: uploading local datacards.json to both paths"
            curl --ssl-reqd --insecure --ftp-create-dirs --ftp-pasv --disable-epsv \
              --user "$FTP_USERNAME:$FTP_PASSWORD" \
              -T out/assets/data/datacards.json \
              "ftp://$FTP_SERVER/$FTP_DIR/assets/data/datacards.json"

            curl --ssl-reqd --insecure --ftp-create-dirs --ftp-pasv --disable-epsv \
              --user "$FTP_USERNAME:$FTP_PASSWORD" \
              -T out/assets/data/datacards.json \
              "ftp://$FTP_SERVER/$FTP_DIR/data/datacards.json"

            body=$(curl -fsS "$canonical")
            echo "$body" | jq -e '.[] | select((.card_id|tostring=="580140") or (.card_id|tostring=="424915"))' >/dev/null
          fi
          echo "Live JSON OK."
