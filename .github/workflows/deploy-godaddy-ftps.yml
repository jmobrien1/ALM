name: Deploy to GoDaddy (FTPS) - Final

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    env:
      SITE_HOST: www.allegiancelistmarketing.com

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Tools
        run: sudo apt-get update && sudo apt-get install -y lftp curl jq

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Validate Data Contracts
        run: |
          set -euxo pipefail
          npx -y ajv-cli@5 validate -s assets/data/datacards.schema.json -d assets/data/datacards.json
          jq -e 'type=="array"' assets/data/datacards.json >/dev/null

      - name: Prepare Artifact with Cache-Proof Marker
        run: |
          set -euxo pipefail
          rm -rf out
          rsync -av --delete \
            --exclude ".git" --exclude ".github" --exclude "out" \
            --exclude "*.bak.*" --exclude ".DS_Store" \
            ./ out/
          # Create a verification file with a UNIQUE name for this specific commit
          echo "Verified: ${GITHUB_SHA}" > "out/deploy-${GITHUB_SHA}.txt"
          echo "--> Created unique verification file: out/deploy-${GITHUB_SHA}.txt"

      - name: Upload via FTPS
        env:
          FTP_SERVER: ${{ secrets.FTP_SERVER }}
          FTP_USERNAME: ${{ secrets.FTP_USERNAME }}
          FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
          FTP_DIR: ${{ secrets.FTP_DIR }}
        run: |
          set -euxo pipefail
          # FTP_DIR secret must be set to "." for this to work
          : "${FTP_DIR:=.}"
          lftp -u "$FTP_USERNAME","$FTP_PASSWORD" "$FTP_SERVER" -e "
            set ftp:passive-mode true;
            set ftp:ssl-force true;
            set ftp:ssl-protect-data true;
            set ssl:verify-certificate false;
            set xfer:clobber on;
            set net:max-retries 3;
            set net:timeout 45;
            cd '$FTP_DIR';
            mirror -R --ignore-time --delete --verbose=3 out/ ./;
            bye;
          "

      - name: Wait for Server File Propagation
        run: sleep 15

      - name: Verify Live Deployment via Unique URL
        run: |
          set -euxo pipefail
          VERIFY_URL="https://${SITE_HOST}/deploy-${GITHUB_SHA}.txt"
          echo "--> Verifying URL: ${VERIFY_URL}"
          
          # Retry loop in case of minor propagation delay
          for i in {1..5}; do
            # We use '--fail' to exit with an error on 404s
            http_status=$(curl --silent --output /dev/null --write-out "%{http_code}" "${VERIFY_URL}?v=$(date +%s)")
            if [ "$http_status" -eq 200 ]; then
               echo "✅ SUCCESS: Verification file found. Deployment is live."
               exit 0
            fi
            echo "Attempt $i: Verification file not found (HTTP $http_status). Retrying in 10s..."
            sleep 10
          done
          
          echo "❌ FAILURE: Could not find verification file at ${VERIFY_URL} after multiple attempts."
          exit 1
