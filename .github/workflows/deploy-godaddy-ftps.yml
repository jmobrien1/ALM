name: Deploy to GoDaddy (FTPS, robust)
on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    steps:
      - uses: actions/checkout@v4

      # --- Build (Node) ---
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install deps
        run: |
          set -e
          if [ -f package-lock.json ]; then
            npm ci --no-audit --no-fund
          else
            npm i --no-audit --no-fund
          fi

      - name: Build datacards from PDFs
        run: |
          set -euxo pipefail
          node -v
          ls -la assets/pdfs/legacy || true
          node tools/ingest_legacy_pdfs.js
          # quick sanity
          jq 'length' assets/data/datacards.json
          jq -r '.[]|.card_id' assets/data/datacards.json | head

      # --- Prepare artifact ---
      - name: Prepare artifact
        run: |
          set -e
          rm -rf out
          mkdir -p out/.well-known
          rsync -av --delete \
            --exclude ".git" \
            --exclude ".github" \
            --exclude "out" \
            --exclude "*.bak.*" \
            --exclude ".DS_Store" \
            ./ ./out/
          echo "${GITHUB_SHA}" > out/.well-known/alm-deploy.txt
          echo "${GITHUB_SHA}" > out/deploy-check.txt
          # keep legacy JSON path too
          if [ -f out/assets/data/datacards.json ]; then
            mkdir -p out/data
            cp -f out/assets/data/datacards.json out/data/datacards.json
          fi
          # ensure /marketplace/ alias
          mkdir -p out/marketplace
          cp -f out/marketplace.html out/marketplace/index.html

      # --- Upload ---
      - name: Install lftp + curl + jq
        run: sudo apt-get update && sudo apt-get install -y lftp curl jq

      - name: FTPS upload (mirror)
        env:
          FTP_SERVER:   ${{ secrets.FTP_SERVER }}
          FTP_USERNAME: ${{ secrets.FTP_USERNAME }}
          FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
          FTP_DIR:      ${{ secrets.FTP_DIR }}
        run: |
          set -e
          : "${FTP_DIR:=public_html}"
          lftp -u "$FTP_USERNAME","$FTP_PASSWORD" "$FTP_SERVER" -e "\
            set net:max-retries 5; set net:persist-retries 3; set net:timeout 45; \
            set net:reconnect-interval-base 5; set net:reconnect-interval-max 60; \
            set ftp:passive-mode true; set ftp:ssl-force true; set ftp:ssl-protect-data true; \
            set xfer:clobber on; set ssl:verify-certificate false; \
            mkdir -p $FTP_DIR; cd $FTP_DIR; \
            mirror -R --ignore-time --delete --verbose=2 out/ ./; \
            bye"

      # --- Verify + self heal ---
      - name: Verify docroot SHA
        run: |
          set -e
          url="https://www.allegiancelistmarketing.com/.well-known/alm-deploy.txt?v=$(date +%s)"
          live_sha=$(curl -fsS "$url")
          test "$live_sha" = "${GITHUB_SHA}" || { echo "Docroot not updated (got $live_sha)"; exit 1; }
          echo "Docroot updated: $live_sha"

      - name: Verify LIVE JSON (contains legacy IDs) and self-heal if needed
        env:
          FTP_SERVER:   ${{ secrets.FTP_SERVER }}
          FTP_USERNAME: ${{ secrets.FTP_USERNAME }}
          FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
          FTP_DIR:      ${{ secrets.FTP_DIR }}
        run: |
          set -e
          : "${FTP_DIR:=public_html}"
          ad="https://www.allegiancelistmarketing.com/assets/data/datacards.json?v=$(date +%s)"
          body=$(curl -fsS "$ad" || true)
          ok_json=0
          echo "$body" | jq -e '.[0]' >/dev/null 2>&1 && ok_json=1
          if [ "$ok_json" -ne 1 ]; then
            echo "assets/data is not JSON; uploading local copy"
            curl --ssl-reqd --insecure --ftp-create-dirs --ftp-pasv --disable-epsv \
              --user "$FTP_USERNAME:$FTP_PASSWORD" \
              -T out/assets/data/datacards.json \
              "ftp://$FTP_SERVER/$FTP_DIR/assets/data/datacards.json"
            body=$(curl -fsS "$ad")
          fi
          echo "$body" | jq -e '.[]|select(.card_id==580140)' >/dev/null || { echo "Missing 580140"; exit 1; }
          echo "$body" | jq -e '.[]|select(.card_id==424915)' >/dev/null || { echo "Missing 424915"; exit 1; }
          echo "OK: Live JSON includes legacy IDs."
