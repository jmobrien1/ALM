name: Deploy to GoDaddy (FTPS, robust, soft-verify)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # --- Build (optional) ---
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install deps (if package.json exists)
        run: |
          set -e
          if [ -f package.json ]; then
            if [ -f package-lock.json ]; then
              npm ci --no-audit --no-fund
            else
              npm i --no-audit --no-fund
            fi
          else
            echo "No package.json; skipping npm install"
          fi

      - name: Build datacards from PDFs (optional)
        run: |
          set -e
          if [ -f tools/ingest_legacy_pdfs.js ]; then
            node tools/ingest_legacy_pdfs.js
          else
            echo "No ingest_legacy_pdfs.js; skipping ingest"
          fi

      # --- Prepare artifact ---
      - name: Prepare artifact
        run: |
          set -e
          rm -rf out
          mkdir -p out/.well-known
          rsync -av --delete \
            --exclude ".git" \
            --exclude ".github" \
            --exclude "out" \
            --exclude "*.bak.*" \
            --exclude ".DS_Store" \
            ./ ./out/
          echo "${GITHUB_SHA}" > out/.well-known/alm-deploy.txt
          echo "${GITHUB_SHA}" > out/deploy-check.txt
          if [ -f out/assets/data/datacards.json ]; then
            mkdir -p out/data
            cp -f out/assets/data/datacards.json out/data/datacards.json
          fi
          mkdir -p out/marketplace
          cp -f out/marketplace.html out/marketplace/index.html || true

      # --- Upload ---
      - name: Install lftp + curl + jq
        run: sudo apt-get update && sudo apt-get install -y lftp curl jq

      - name: Upload via FTPS (mirror, retry)
        env:
          FTP_SERVER:   ${{ secrets.FTP_SERVER }}
          FTP_USERNAME: ${{ secrets.FTP_USERNAME }}
          FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
          FTP_DIR:      ${{ secrets.FTP_DIR }}
        run: |
          set -e
          : "${FTP_DIR:=public_html}"
          for attempt in 1 2 3; do
            echo "lftp mirror attempt $attempt..."
            lftp -u "$FTP_USERNAME","$FTP_PASSWORD" "$FTP_SERVER" -e "\
              set net:max-retries 5; set net:persist-retries 3; set net:timeout 45; \
              set net:reconnect-interval-base 5; set net:reconnect-interval-max 60; \
              set ftp:passive-mode true; set ftp:ssl-force true; set ftp:ssl-protect-data true; \
              set xfer:clobber on; set ssl:verify-certificate false; \
              mkdir -p $FTP_DIR; cd $FTP_DIR; \
              mirror -R --ignore-time --delete --verbose=2 out/ ./; \
              bye" && break || sleep 3
          done

      # --- Probe docroot (soft) ---
      - name: Probe: list + head (soft)
        if: always()
        continue-on-error: true
        env:
          FTP_SERVER:   ${{ secrets.FTP_SERVER }}
          FTP_USERNAME: ${{ secrets.FTP_USERNAME }}
          FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
          FTP_DIR:      ${{ secrets.FTP_DIR }}
        run: |
          : "${FTP_DIR:=public_html}"
          lftp -u "$FTP_USERNAME","$FTP_PASSWORD" "$FTP_SERVER" -e "\
            set ftp:passive-mode true; set ftp:ssl-force true; set ftp:ssl-protect-data true; set ssl:verify-certificate false; \
            cd $FTP_DIR; pwd; ls -la; \
            echo '--- head deploy-check.txt ---'; cat -n deploy-check.txt | head -n 5 || true; \
            echo '--- assets/data listing ---'; cls -la assets/data || true; \
            echo '--- head datacards.json ---'; cat -n assets/data/datacards.json | head -n 20 || true; \
            bye"

      # --- Verify marker (soft, self-heal) ---
      - name: Verify docroot marker (warn-only; self-heal)
        continue-on-error: true
        env:
          FTP_SERVER:   ${{ secrets.FTP_SERVER }}
          FTP_USERNAME: ${{ secrets.FTP_USERNAME }}
          FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
          FTP_DIR:      ${{ secrets.FTP_DIR }}
        run: |
          url="https://www.allegiancelistmarketing.com/deploy-check.txt?v=$(date +%s)"
          live=$(curl -fsS "$url" || true)
          if [ "$live" != "${GITHUB_SHA}" ]; then
            echo "::warning::Marker mismatch: got '$live' expected '${GITHUB_SHA}'. Healing…"
            : "${FTP_DIR:=public_html}"
            curl --ssl-reqd --insecure --ftp-create-dirs --ftp-pasv --disable-epsv \
              --user "$FTP_USERNAME:$FTP_PASSWORD" \
              -T out/deploy-check.txt \
              "ftp://$FTP_SERVER/$FTP_DIR/deploy-check.txt" || true
            sleep 3
            live=$(curl -fsS "$url" || true)
            if [ "$live" != "${GITHUB_SHA}" ]; then
              echo "::warning::Marker still mismatched after heal (got '$live')."
            else
              echo "Docroot updated: $live"
            fi
          else
            echo "Docroot updated: $live"
          fi
          true

      # --- Verify JSON/pages (soft, retry + heal) ---
      - name: Verify LIVE JSON/pages (retry + heal; warn-only)
        continue-on-error: true
        env:
          FTP_SERVER:   ${{ secrets.FTP_SERVER }}
          FTP_USERNAME: ${{ secrets.FTP_USERNAME }}
          FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
          FTP_DIR:      ${{ secrets.FTP_DIR }}
        run: |
          : "${FTP_DIR:=public_html}"
          canonical="https://www.allegiancelistmarketing.com/assets/data/datacards.json?v=$(date +%s)"
          fetch_json() { curl -fsS --max-time 20 "$1" || true; }
          check_ids() { echo "$1" | jq -e '.[] | select((((.card_id // .id)|tostring)=="580140") or (((.card_id // .id)|tostring)=="424915"))' >/dev/null 2>&1; }

          body=""
          for i in 1 2 3 4 5; do
            body=$(fetch_json "$canonical")
            echo "$body" | jq -e 'type=="array"' >/dev/null 2>&1 && break
            sleep 2
          done

          ok=0
          echo "$body" | jq -e 'type=="array"' >/dev/null 2>&1 && check_ids "$body" && ok=1

          if [ "$ok" -ne 1 ]; then
            echo "::warning::JSON not confirmed. Healing upload to both paths…"
            curl --ssl-reqd --insecure --ftp-create-dirs --ftp-pasv --disable-epsv \
              --user "$FTP_USERNAME:$FTP_PASSWORD" \
              -T out/assets/data/datacards.json \
              "ftp://$FTP_SERVER/$FTP_DIR/assets/data/datacards.json" || true
            curl --ssl-reqd --insecure --ftp-create-dirs --ftp-pasv --disable-epsv \
              --user "$FTP_USERNAME:$FTP_PASSWORD" \
              -T out/assets/data/datacards.json \
              "ftp://$FTP_SERVER/$FTP_DIR/data/datacards.json" || true
            sleep 3
            body=$(fetch_json "$canonical")
            echo "$body" | jq -e 'type=="array"' >/dev/null 2>&1 && check_ids "$body" && ok=1
          fi

          if [ "$ok" -eq 1 ]; then
            echo "Live JSON OK."
          else
            echo "::warning::JSON still not confirmed. Checking pages…"
            okp=0
            curl -fsS "https://www.allegiancelistmarketing.com/datacard.html?id=580140&v=$(date +%s)" | grep -q "Data card not found" || okp=1
            curl -fsS "https://www.allegiancelistmarketing.com/datacard.html?id=424915&v=$(date +%s)" | grep -q "Data card not found" || okp=1
            if [ "$okp" -eq 1 ]; then
              echo "Pages render OK; proceeding."
            else
              echo "::warning::Could not verify pages either. Likely transient cache."
            fi
          fi
          true
